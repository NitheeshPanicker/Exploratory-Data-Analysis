find.package("devtools")
q()
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
install.packages("ggplot2")
x <- rnorm(10)
x
y <- rnorm(10)
plot(x,y)
library(ggplot2)
ggplot(x,y)
qplot(x,y)
plot(x,y)
plot(x,y,type = "l")
plot(x,y, pch = 19)
plot(x,y, pch = 3)
install.packages("dplyr")
getwd()
help
x<-1:25
x
add3<- function(a,b,c)
{
a+b+c
}
add3(1,2,3)
library(datasets)
data(iris)
?iris
iris
apply(iris, 1 , mean)
mean(a$virginica$Sepal.length)
head(iris)
str(iris)
a<-split(iris, iris$Species)
mean(a$virginica$Sepal.Length)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
complete("specdata", 30:25)
avg4cyl = mtcars.Data |> Seq.filter (fun x -> x?cyl = "4") |> Seq.averageBy (fun x -> x?hp.AsFloat())
let avg4cyl = mtcars.Data |> Seq.filter (fun x -> x?cyl = "4") |> Seq.averageBy (fun x -> x?hp.AsFloat())
avg4cyl = mtcars.Data
mtcars = CsvFile.Load("https://raw.github.com/ropensci/rfigshare/master/inst/doc/mtcars.csv")
let mtcars = CsvFile.Load("https://raw.github.com/ropensci/rfigshare/master/inst/doc/mtcars.csv")
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
debug(ls)
ls
debug(ls)
ls
n
ls
sapply(mtcars, cyl, mean)
q()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
packages(swirl)
swirl()
q()
install.packages("swirl")
install_from_swirl("R Programming")
library(swirl)
install_from_swirl("R Programming")
install_from_swirl("R Programming")
install.packages('Rmysql')
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(sqldf)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "acs.csv", method = "curl")
dateDownloaded <- date()
acs <- read.table("./acs.csv",sep=",",header=TRUE)
head(acs)
install.packages(sqldf)
install.packages("sqldf")
library(sqldf)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "acs.csv", method = "curl")
download.file(fileUrl, destfile = "acs.csv")
dateDownloaded <- date()
acs <- read.table("./acs.csv",sep=",",header=TRUE)
head(acs)
agricultureLogical<-(acs$ACR==3 & acs$AGS==6)
which(agricultureLogical)
class(agricultureLogical)
install.packages("jpeg")
library(jpeg)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"''
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, destfile = "jeff.jpg")
img.n<-readJPEG("jeff.jpg",TRUE)
img.n<-readJPEG("jeff.jpg")
download.file(fileUrl, destfile = "jeff.jpg")
download.file(fileUrl, destfile = "jeff.jpg", method = "curl")
install.packages("curl")
https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
download.file(fileUrl, destfile = "jeff.jpg", method = "curl")
download.file(fileUrl, destfile = "jeff.jpg")
getwd()
img.n<-readJPEG("jeff.jpg",TRUE)
img.n<-readJPEG("jeff.jpg")
quantile(img.n,probs=c(0.3,0.8)
quantile(img.n,probs=c(0.3,0.8)
quantile(img.n,probs=c(0.3,0.8)
quantile(img.n,probs=c(0.3,0.8))
download.file(fileUrl, destfile = "jeff.jpg", method = "curl")
img.n<-readJPEG("jeff.jpg",TRUE)
quantile(img.n,probs=c(0.3,0.8))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "gdp.csv")
gdp <- read.csv("./gdp.csv")
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile = "edu.csv")
edu <- read.csv("./edu.csv")
X=CountryCode
X=CountryCode
X=CountryCode
names(gdp)
names(edu)
head(gdp)
head(edu)
gdpclean<-gdp[5:194,]
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
head(mergedData)
mergeddata
mergedData
nnp<-mergedData[mergedData$Income.Group=="High income: OECD",]
nnp
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
nrow(mergedData)
library(plyr)
nnp<-arrange(mergedData,desc(Ranking))
mergerdata
mergedData
names(gdp)
head(edu)
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
mergedData$Gross.domestic.product.2012
gdpclean<-gdp[5:194,]
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
X=CountryCode
X="CountryCode"
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData
head(mergedData)
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
quantile(mergedData$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
quantile(mergedData$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
cleanedData <- gsub(",", "", gdpData[5:194, 5])
gdpData <- read.csv("./data/gdp.csv")
gdpData <- read.csv("gdp.csv")
cleanedData <- gsub(",", "", gdpData[5:194, 5])
numData <- as.numeric(cleanedData)
mean(numData)
regexec("^United", countryNames)
which(ACS$agricultureLogical)
ACS <- read.csv('ACS.csv')
ACS$agricultureLogical <- ifelse(ACS$ACR==3 & ACS$AGS==6,TRUE,FALSE)
which(ACS$agricultureLogical)
library(jpeg)
picture <- readJPEG('jeff.jpg', native=TRUE)
quantile(picture, probs = c(0.3, 0.8) )
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP.csv'
download.file(file.url, file.dest )
rowNames <- seq(10,200, 2)
gdp <- read.csv('GDP.csv', header=F, skip=5, nrows=190)
View(gdp
View(gdp)
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
file.dest <- 'GDP2.csv'
download.file(file.url, file.dest )
fed <- read.csv('GDP2.csv')
View(fed)
combined <- merge(gdp, fed, by.x='V1', by.y='CountryCode', sort=TRUE)
View(combined)
combined[with(combined, order(-V2) )]
combined[with(combined, order(-V2) )]
combined[with(combined, order(V2)]
combined[with(combined, order(V2) )
combined[with(combined, order(V2) )]
nnp<-arrange(mergedData,desc(Ranking))
nnp<-arrange(combined,desc(V2))
view(nnp)
View(nnp)
mean(combined[combined$Income.Group=='High income: OECD',]$V2)
quentile <- c(0.2,0.4,0.6,0.8,1)
q <- quantile(combined$V2, quentile)
q1 <- combined$V2 <= 38
xtabs(q1 ~ combined$Income.Group)
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
file.dest <- 'ACS4.csv'
download.file(file.url, file.dest, method='curl')
download.file(file.url, file.dest)
download.file(file.url, file.dest)
ACS <- read.csv(file.dest)
names <- names(ACS)
strsplit(names, 'wgtp')[123]
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP4.csv'
download.file(file.url, file.dest, method='wget')
download.file(file.url, file.dest)
GDP <- read.csv(file.dest, skip=4, nrows=190)
GDPdol <- gsub(",", "", GDP$X.4)
GDPdol <- as.integer(GDPdol)
mean(GDPdol, na.rm=TRUE)
attach(GDP)
grep("^United",GDP$V4)
grep("^United",countryNames), 3
grep("^United",GDP$V4),3
grep("^United",countryNames)
grep("^United",GDP)
grep("*United",GDP$V4)
grep("*United",GDP$V4),5
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP4.csv'
download.file(file.url, file.dest)
GDP <- read.csv(file.dest, skip=4, nrows=190)
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
file.dest <- 'edu.csv'
download.file(file.url, file.dest)
edu <- read.csv(file.dest)
edu <- read.csv(file.dest)
merged <- merge(GDP, edu, by.x = 'X', by.y = 'CountryCode')
fy.june <- grep('Fiscal year end: June', merged$Special.Notes)
length(fy.june)
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
year2012 <- grepl('2012-*', sampleTimes)
table(year2012)
sampleTimes2012 <- subset(sampleTimes, year2012)
day <- format(sampleTimes2012, '%A')
table(day)
view(GDP)
View(GDP)
grep("^United",GDP$V4)
grep("^United",GDP$X.3)
grep("^United",GDP$X3)
getwd()
R.version.string
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package,country)
5:20
elect(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -(X:size))
select(cran, -5:20)
select(cran, -(5:20))
-5:20
select(cran, -(5:20))
-(5:20)
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version <="3.0.2", country=="IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500 , r_os=="linux-gnu")
s.na(c(3, 5, NA, 10))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<-filter(cran,size:ip_id)
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
library(dplyr)
cran <- tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
rm("mydf")
cran
cran
?group_by
?group_by
cran
group_by(cran, package)
by_package<- group_by(cran, package)
by_package
by_package
summarize( by_package, mean(size))
summarize( by_package, mean(size))
submit(0)
submit()
save()
source('C:/Users/SG0215~1/AppData/Local/Temp/RtmpsjjR9Z/summarize1.R')
save()
save('C:/Users/SG0215~1/AppData/Local/Temp/RtmpsjjR9Z/summarize1.R')
save()
source('C:/Users/SG0215~1/AppData/Local/Temp/RtmpsjjR9Z/summarize1.R')
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
plot(p)
?lines()
?panel.abline
?points()
?axis()
?panel.abline
install.packages("Hmisc")
setwd("~/R/Reproducible Research")
---
title: "PA1_template.Rmd"
author: "Nitheesh Panicker"
date: "Wednesday, August 12, 2015"
output: html_document
---
# Reproducible Research: Peer Assessment 1
```{r, echo=TRUE, results='hide', warning=FALSE, message=FALSE}
library(ggplot2)
library(Hmisc)
library(scales)
```
=======================================
## Loading and preprocessing the data
=======================================
-------------------------------------------
### Step 1. Load the data (i.e. read.csv())
-------------------------------------------
```{r}
if(!file.exists('activity.csv')){
unzip('repdata-data-activity.zip')
}
activityData <- read.csv('activity.csv')
```
---------------------------------------------------------------------------------------------
###Step 2. Process/transform the data (if necessary) into a format suitable for your analysis
---------------------------------------------------------------------------------------------
```{r}
#activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
```
=====================================================
## What is mean total number of steps taken per day?
=====================================================
------------------------------------------------------
###1.Calculate the total number of steps taken per day
------------------------------------------------------
```{r}
stepsPerDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
```
-------------------------------------------------------------------
###2. Make a histogram of the total number of steps taken each day
-------------------------------------------------------------------
```{r}
qplot(stepsPerDay, xlab='Total steps per day', ylab='Frequency using binwith 250', binwidth=250)
```
----------------------------------------------------------------------------------
###3. Calculate and report the mean and median total number of steps taken per day
----------------------------------------------------------------------------------
```{r}
stepsPerDayMean <- mean(stepsPerDay)
stepsPerDayMedian <- median(stepsPerDay)
```
* Mean: `r stepsByDayMean`
* Median:  `r stepsByDayMedian`
=====================================================
## What is the average daily activity pattern?
=====================================================
```{r}
avgStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
```
-----------------------------------------
###1. Make a time series plot
-----------------------------------------
```{r}
ggplot(data=avgStepsPerTimeBlock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5 Min interval") +
ylab("Avg number of steps taken")
```
---------------------------------------------------------------------------------------------------------------------------
###2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
---------------------------------------------------------------------------------------------------------------------------
```{r}
mostSteps <- which.max(avgStepsPerTimeBlock$meanSteps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", avgStepsPerTimeBlock[mostSteps,'interval'])
```
* Most Steps at: `r timeMostSteps`
----
=====================================================
## Imputing missing values
=====================================================
----------------------------------------------------------------------------
###1. Calculate and report the total number of missing values in the dataset
----------------------------------------------------------------------------
```{r}
numMissingValues <- length(which(is.na(activityData$steps)))
```
* Number of missing values: `r numMissingValues`
--------------------------------------------------------------------------------
###2. Devise a strategy for filling in all of the missing values in the dataset.
--------------------------------------------------------------------------------
###3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
--------------------------------------------------------------------------------
```{r}
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
```
--------------------------------------------------------------------------------
###4. Make a histogram of the total number of steps taken each day
--------------------------------------------------------------------------------
```{r}
stepsByDayImputed <- tapply(activityDataImputed$steps, activityDataImputed$date, sum)
qplot(stepsByDayImputed, xlab='Total steps per day (Imputed)', ylab='Frequency using binwith 250', binwidth=250)
```
----------------------------------------------------------------------------------------
###... and Calculate and report the mean and median total number of steps taken per day.
----------------------------------------------------------------------------------------
```{r}
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
```
* Mean (Imputed): `r stepsByDayMeanImputed`
* Median (Imputed):  `r stepsByDayMedianImputed`
----
==========================================================================================================
## Are there differences in activity patterns between weekdays and weekends?
==========================================================================================================
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
###1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
```{r}
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
```
------------------------------------------------------
###2. Make a panel plot containing a time series plot
------------------------------------------------------
```{r}
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5 Min interval") +
ylab("Avg number of steps")
```
